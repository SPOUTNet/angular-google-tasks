/*! angular-google-tasks - v0.0.1 - 2014-09-06 01:59 */
"use strict";angular.module("googleTasks",["ngRoute","ngAnimate","components.services","components.directives","login","tasklists","tasks"]).config(["googleApiProvider",function(googleApiProvider){googleApiProvider.setConfig({clientId:"421579928051-79o2r8382t52m5tdls381l4rlns6hr95.apps.googleusercontent.com",apiKey:"AIzaSyCoFGS6BzXCErahLsI8GFsOP-xQ5P7Qc0U",scopes:["https://www.googleapis.com/auth/tasks","https://www.googleapis.com/auth/plus.me"]})}]).run(["$rootScope","$timeout","$q","$location","application","googleApi","security",function($rootScope,$timeout,$q,$location,application,googleApi,security){var gapiPromise,timeout,routeChangePromise,onRouteChangeSuccessHandler,onRouteChangeSuccess;gapiPromise=googleApi.init().then(function(data){return security.setAuthObject(data)}),timeout=$timeout(angular.noop,500,!1),routeChangePromise=$q.defer(),onRouteChangeSuccessHandler=function(){routeChangePromise.resolve(),onRouteChangeSuccess()},onRouteChangeSuccess=$rootScope.$on("$routeChangeSuccess",onRouteChangeSuccessHandler),security.authState=gapiPromise,$q.all([timeout,gapiPromise,routeChangePromise.promise]).then(function(){application.ready()}),$rootScope.$on("$locationChangeStart",function(){var path=$location.path();(""===path||"/"===path)&&(application.ready(function(){var redirectPath=security.isSignedIn()?"/tasklists":"/login";$location.path(redirectPath)}),onRouteChangeSuccessHandler())});var resolveOnce=!1;$rootScope.$on("$routeChangeError",function(event,current){resolveOnce||(resolveOnce=!0,routeChangePromise.resolve(),onRouteChangeSuccess()),application.ready(function(){var onRouteError=current.onRouteError;onRouteError&&onRouteError.redirectTo&&$location.path(onRouteError.redirectTo)})})}]),angular.extend=function extendDeep(dst){return angular.forEach(arguments,function(obj){obj!==dst&&angular.forEach(obj,function(value,key){dst[key]&&dst[key].constructor&&dst[key].constructor===Object?extendDeep(dst[key],value):dst[key]=value})}),dst},angular.module("components.directives",[]),angular.module("components.services.security",[]),angular.module("components.services",["components.services.application","components.services.googleApi","components.services.tasks","components.services.security","components.services.routeFilter","components.services.cache"]),function(){function login($routeProvider,securityProvider){$routeProvider.when("/login",{templateUrl:"login/login.html",controller:"loginController",resolve:{auth:securityProvider.requestGuest},onRouteError:{redirectTo:"/tasklists"},page:{title:"Sign In | "+document.title,className:"login-screen"}})}login.$inject=["$routeProvider","securityProvider"],angular.module("login",["ngRoute"],login)}(),function(){function tasklists(routeFilterProvider,securityProvider){routeFilterProvider.registerFilter("/tasklists:path?",{resolve:{auth:securityProvider.requestSignedIn},onRouteError:{redirectTo:"/login"}}),routeFilterProvider.when("/tasklists",{templateUrl:"tasklists/tasklists.html",controller:"tasklistsController",page:{className:"tasklists-screen slide",title:"Task Lists | "+document.title}})}tasklists.$inject=["routeFilterProvider","securityProvider"],angular.module("tasklists",["ngRoute"],tasklists)}(),function(){function tasks(routeFilterProvider){routeFilterProvider.when("/tasklists/:title/:id",{templateUrl:"tasks/tasks.html",controller:"tasksController",page:{className:"tasks-screen slide",title:"Tasks | "+document.title}})}tasks.$inject=["routeFilterProvider"],angular.module("tasks",[],tasks)}(),angular.module("googleTasks").controller("appController",["$scope","$route","application",function($scope,$route,application){application.ready(function(){$scope.appReady=!0}),$scope.$on("$routeChangeSuccess",function(newVal,oldVal){oldVal!==newVal&&($scope.routeClassName=$route.current.page.className,document.title=$route.current.page.title)}),$scope.back=function(){window.history.back()}}]),function(){function backTransition($rootScope,$location){return{link:function(scope,element){var backClass="reverse";$rootScope.$on("$locationChangeSuccess",function(){$rootScope.currentPath=$location.path(),element.removeClass(backClass)}),$rootScope.$watch(function(){return $location.path()},function(newPath){$rootScope.currentPath===newPath&&element.addClass(backClass)})}}}backTransition.$inject=["$rootScope","$location"],angular.module("components.directives").directive("backTransition",backTransition)}(),angular.module("components.services.application",[]).factory("application",["$q",function($q){var stack=[],service={isReady:!1,ready:function(callback){if("function"==typeof callback)service.isReady?callback():stack.push(callback);else{service.isReady=!0;for(var i=stack.length-1;i>=0;i--)stack[i]()}},readyState:function(){var deferred=$q.defer();return service.ready(deferred.resolve),deferred.promise}};return service}]),function(){function cache($q){function cacheFunction(key,setterFunction){return cacheData[key]?$q.when(cacheData[key]):setterFunction().then(function(data){return cacheData[key]=data,data})}var cacheData={};return cacheFunction.get=function(key){return cacheData[key]},cacheFunction}cache.$inject=["$q"],angular.module("components.services.cache",[]).factory("cache",cache)}(),angular.module("components.services.googleApi",[]).provider("googleApi",function(){var config={};this.setConfig=function(configObj){config=configObj},this.$get=["$q",function($q){var service={init:function(loginCheck){var deferred=$q.defer();window.gapiLoaded=function(){gapi.client.setApiKey(config.apiKey),delete window.gapiLoaded,deferred.resolve()};var script=document.createElement("script");return script.src="https://apis.google.com/js/client.js?onload=gapiLoaded",document.body.appendChild(script),"undefined"==typeof loginCheck&&(loginCheck=!0),loginCheck?deferred.promise.then(function(){return service.login(!0).then(function(data){return data},function(data){return data})}):deferred.promise},login:function(immediate){var deferred=$q.defer();return window.setTimeout(function(){service.checkAuth("undefined"==typeof immediate?!1:immediate,deferred)},1),deferred.promise},checkAuth:function(immediate,deferred){function handleAuthResult(authResult){authResult&&!authResult.error?deferred.resolve(authResult):deferred.reject(authResult)}gapi.auth.authorize({client_id:config.clientId,scope:config.scopes,immediate:immediate},handleAuthResult)}};return service}]}),angular.module("components.services.routeFilter",["ngRoute"]).provider("routeFilter",["$routeProvider",function($routeProvider){function getExtendedConfig(path){for(var key in registeredFilters)if(new RegExp(key).test(path))return registeredFilters[key];return{}}var registeredFilters={};this.registerFilter=function(path,rule){path="^"+path.replace(/\//g,"\\/").replace(/:path/g,"(\\/.+?)")+"$",registeredFilters[path]=rule},this.when=function(path,config){return config=angular.extend({},getExtendedConfig(path),config),$routeProvider.when(path,config),this},this.otherwise=$routeProvider.otherwise,this.$get=angular.noop}]),angular.module("components.services.security").provider("security",{requestSignedIn:["security",function(security){return security.requestSignedIn()}],requestGuest:["security",function(security){return security.requestGuest()}],$get:["$q",function($q){var service={authState:null,authObject:null,setAuthObject:function(data){return service.authObject=data,service.authObject},isSignedIn:function(){return this.authObject&&this.authObject.status&&this.authObject.status.signed_in},requestAuthState:function(){return service.authObject?$q.when(service.authObject):service.authState},requestSignedIn:function(){return service.requestAuthState().then(function(){return service.isSignedIn()?!0:$q.reject("authorization required")})},requestGuest:function(){return service.requestAuthState().then(function(){return service.isSignedIn()?$q.reject("already signed in"):!0})}};return service}]}),function(){function tasks($http,cache){function groupTasks(tasks){var idIndexMap={};return tasks.forEach(function(task,index){if(idIndexMap[task.id]=index,task.parent){var parent=tasks[idIndexMap[task.parent]];parent.children=parent.children||[],parent.children.push(task)}}),tasks}var basePath="https://www.googleapis.com/tasks/v1",params={params:{access_token:gapi.auth.getToken().access_token}};return{getTaskLists:function(){return cache("tasklists",function(){return $http.get(basePath+"/users/@me/lists",params).then(function(response){return response.data.items})})},getTasks:function(tasklistId){return cache("tasks"+tasklistId,function(){return $http.get(basePath+"/lists/"+tasklistId+"/tasks",params).then(function(response){return groupTasks(response.data.items)})})},moveTask:function(tasklistId,taskId){return $http(basePath+"/lists/"+tasklistId+"/tasks/"+taskId+"/move",params)}}}tasks.$inject=["$http","cache"],angular.module("components.services.tasks",[]).factory("tasks",tasks)}(),function(){function loginController($scope,$location,googleApi,security){$scope.login=function(){googleApi.login().then(function(data){security.authObject=data,$location.path("/tasklists")},function(data){console.log("not ok",data)})}}loginController.$inject=["$scope","$location","googleApi","security"],angular.module("login").controller("loginController",loginController)}(),function(){function tasklistsController($scope,tasks){tasks.getTaskLists().then(function(data){$scope.taskLists=data})}tasklistsController.$inject=["$scope","tasks"],angular.module("tasklists").controller("tasklistsController",tasklistsController)}(),function(){function tasksController($scope,$routeParams,tasks){$scope.title=$routeParams.title,tasks.getTasks($routeParams.id).then(function(data){$scope.tasks=data})}tasksController.$inject=["$scope","$routeParams","tasks"],angular.module("tasks").controller("tasksController",tasksController)}();